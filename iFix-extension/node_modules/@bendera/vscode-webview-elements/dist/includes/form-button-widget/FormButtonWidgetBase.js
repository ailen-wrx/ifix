var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { property } from 'lit/decorators.js';
import { applyForegroundRGBA } from '../themeHelpers';
import { VscElement } from '../VscElement';
export class FormButtonWidgetBase extends VscElement {
    constructor() {
        super();
        this.tabindex = 0;
        this.focused = false;
        this._prevTabindex = 0;
        this._uid = `id_${new Date().valueOf()}_${Math.floor(Math.random() * 9999)}`;
        this._handleFocusBound = this._handleFocus.bind(this);
        this._handleBlurBound = this._handleBlur.bind(this);
        applyForegroundRGBA();
        this.addEventListener('keydown', this._handleKeyDown.bind(this));
    }
    connectedCallback() {
        super.connectedCallback();
        this.addEventListener('focus', this._handleFocusBound);
        this.addEventListener('blur', this._handleBlurBound);
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.removeEventListener('focus', this._handleFocusBound);
        this.removeEventListener('blur', this._handleBlurBound);
    }
    attributeChangedCallback(name, oldVal, newVal) {
        super.attributeChangedCallback(name, oldVal, newVal);
        if (name === 'disabled' && this.hasAttribute('disabled')) {
            this._prevTabindex = this.tabindex;
            this.tabindex = -1;
        }
        else if (name === 'disabled' && !this.hasAttribute('disabled')) {
            this.tabindex = this._prevTabindex;
        }
    }
    _handleClick() {
        throw new Error('Not implemented');
    }
    _handleKeyDown(_event) {
        throw new Error('Not implemented');
    }
    _handleFocus() {
        this.focused = true;
    }
    _handleBlur() {
        this.focused = false;
    }
    static get styles() {
        return [super.styles];
    }
}
__decorate([
    property({ type: Number, reflect: true })
], FormButtonWidgetBase.prototype, "tabindex", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], FormButtonWidgetBase.prototype, "focused", void 0);
//# sourceMappingURL=FormButtonWidgetBase.js.map