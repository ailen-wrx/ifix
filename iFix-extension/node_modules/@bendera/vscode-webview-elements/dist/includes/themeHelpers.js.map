{"version":3,"file":"themeHelpers.js","sourceRoot":"","sources":["../../src/includes/themeHelpers.ts"],"names":[],"mappings":"AAAA,MAAM,YAAY,GAAG,+CAA+C,CAAC;AAErE,IAAI,EAAoB,CAAC;AAEzB,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,QAAgB,EAAW,EAAE,CAClD,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAEtC,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,QAAgB,EAAE,KAAa,EAAU,EAAE;IAClE,MAAM,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACjD,MAAM,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACjD,MAAM,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAEjD,OAAO,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,KAAK,GAAG,CAAC;AAC5C,CAAC,CAAC;AAEF,MAAM,wBAAwB,GAAqB,GAAG,EAAE;IACtD,kBAAkB,CAAC,eAAe,EAAE,CAAC,CAAC;AACxC,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,CAAC,OAAe,EAAE,EAAE;;IAC7C,MAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;IAEvD,IAAI,CAAC,QAAQ,EAAE;QACb,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC9C,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QACvC,KAAK,CAAC,SAAS,GAAG,OAAO,CAAC;QAC1B,MAAA,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,0CAAE,WAAW,CAAC,KAAK,CAAC,CAAC;KACpD;SAAM;QACL,QAAQ,CAAC,SAAS,GAAG,OAAO,CAAC;KAC9B;AACH,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,GAAG,EAAE;IAC3B,MAAM,OAAO,GAAG,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,gBAAgB,CAC7D,qBAAqB,CACtB,CAAC;IACF,IAAI,KAAK,GAAG,EAAE,CAAC;IAEf,IAAI,CAAC,OAAO,EAAE;QACZ,KAAK,GAAG,oBAAoB,CAAC;KAC9B;SAAM,IAAI,MAAM,CAAC,OAAO,CAAC,EAAE;QAC1B,KAAK,GAAG,OAAO,CAAC;KACjB;SAAM;QACL,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC;KACvC;IAED,OAAO,uCAAuC,KAAK,IAAI,CAAC;AAC1D,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,UAAU,mBAAmB;IACjC,IAAI,CAAC,EAAE,EAAE;QACP,EAAE,GAAG,IAAI,gBAAgB,CAAC,wBAAwB,CAAC,CAAC;QACpD,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,eAAe,EAAE;YACnC,UAAU,EAAE,IAAI;YAChB,eAAe,EAAE,CAAC,OAAO,CAAC;SAC3B,CAAC,CAAC;KACJ;IAED,kBAAkB,CAAC,eAAe,EAAE,CAAC,CAAC;AACxC,CAAC","sourcesContent":["const STYLE_TAG_ID = '__vscode-webview-elements_custom-properties__';\n\nlet ob: MutationObserver;\n\nexport const isRgba = (colorStr: string): boolean =>\n  /rgba\\([0-9, .]+\\)/g.test(colorStr);\n\nexport const addAlpha = (hexColor: string, alpha: number): string => {\n  const r = parseInt(hexColor.substring(1, 3), 16);\n  const g = parseInt(hexColor.substring(3, 5), 16);\n  const b = parseInt(hexColor.substring(5, 7), 16);\n\n  return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n};\n\nconst mutationObserverCallback: MutationCallback = () => {\n  injectInlineStyles(getStyleContent());\n};\n\nconst injectInlineStyles = (content: string) => {\n  const styleTag = document.getElementById(STYLE_TAG_ID);\n\n  if (!styleTag) {\n    const style = document.createElement('style');\n    style.setAttribute('id', STYLE_TAG_ID);\n    style.innerHTML = content;\n    document.querySelector('head')?.appendChild(style);\n  } else {\n    styleTag.innerHTML = content;\n  }\n};\n\nconst getStyleContent = () => {\n  const fgColor = document.documentElement.style.getPropertyValue(\n    '--vscode-foreground'\n  );\n  let color = '';\n\n  if (!fgColor) {\n    color = 'rgba(0, 0, 0, 0.9)';\n  } else if (isRgba(fgColor)) {\n    color = fgColor;\n  } else {\n    color = addAlpha(fgColor.trim(), 0.9);\n  }\n\n  return `:root{--vsc-foreground-translucent: ${color};}`;\n};\n\n/**\n * Define a translucent version of the foreground color as a global css variable\n */\nexport function applyForegroundRGBA(): void {\n  if (!ob) {\n    ob = new MutationObserver(mutationObserverCallback);\n    ob.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: ['style'],\n    });\n  }\n\n  injectInlineStyles(getStyleContent());\n}\n"]}