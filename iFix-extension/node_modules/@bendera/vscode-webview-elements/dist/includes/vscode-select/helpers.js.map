{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../../src/includes/vscode-select/helpers.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,MAAM,sBAAsB,GAAG,CACpC,OAAe,EACf,OAAe,EACN,EAAE;IACX,MAAM,SAAS,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;IACxC,MAAM,SAAS,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;IACxC,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEnC,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,OAAe,EAAE,OAAe,EAAW,EAAE,CAC3E,OAAO,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC;AAE7D,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,OAAe,EAAE,OAAe,EAAW,EAAE,CACzE,OAAO,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;AAE5D,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,OAAe,EAAE,OAAe,EAAW,EAAE;IACtE,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IAChC,MAAM,SAAS,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;IACxC,MAAM,SAAS,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;IAExC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,EAAE;QAC9B,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAEhD,IAAI,MAAM,KAAK,CAAC,CAAC,EAAE;YACjB,OAAO,KAAK,CAAC;SACd;QAED,KAAK,GAAG,MAAM,GAAG,CAAC,CAAC;KACpB;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,sBAAsB,GAAG,CACpC,IAAsB,EACtB,OAAe,EACf,MAAoB,EACF,EAAE;IACpB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,EAAC,KAAK,EAAC,EAAE,EAAE;QAC7B,QAAQ,MAAM,EAAE;YACd,KAAK,mBAAmB;gBACtB,OAAO,sBAAsB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAChD,KAAK,YAAY;gBACf,OAAO,eAAe,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YACzC,KAAK,UAAU;gBACb,OAAO,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YACvC;gBACE,OAAO,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;SACrC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import {InternalOption, SearchMethod} from './types';\n\nexport const startsWithPerTermMatch = (\n  subject: string,\n  pattern: string\n): boolean => {\n  const lcSubject = subject.toLowerCase();\n  const lcPattern = pattern.toLowerCase();\n  const terms = lcSubject.split(' ');\n\n  return terms.some((t) => t.indexOf(lcPattern) === 0);\n};\n\nexport const startsWithMatch = (subject: string, pattern: string): boolean =>\n  subject.toLowerCase().indexOf(pattern.toLowerCase()) === 0;\n\nexport const containsMatch = (subject: string, pattern: string): boolean =>\n  subject.toLowerCase().indexOf(pattern.toLowerCase()) > -1;\n\nexport const fuzzyMatch = (subject: string, pattern: string): boolean => {\n  let iFrom = 0;\n  let iFound = 0;\n  const iMax = pattern.length - 1;\n  const lcSubject = subject.toLowerCase();\n  const lcPattern = pattern.toLowerCase();\n\n  for (let i = 0; i <= iMax; i++) {\n    iFound = lcSubject.indexOf(lcPattern[i], iFrom);\n\n    if (iFound === -1) {\n      return false;\n    }\n\n    iFrom = iFound + 1;\n  }\n\n  return true;\n};\n\nexport const filterOptionsByPattern = (\n  list: InternalOption[],\n  pattern: string,\n  method: SearchMethod\n): InternalOption[] => {\n  return list.filter(({label}) => {\n    switch (method) {\n      case 'startsWithPerTerm':\n        return startsWithPerTermMatch(label, pattern);\n      case 'startsWith':\n        return startsWithMatch(label, pattern);\n      case 'contains':\n        return containsMatch(label, pattern);\n      default:\n        return fuzzyMatch(label, pattern);\n    }\n  });\n};\n"]}