var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css, html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { INPUT_LINE_HEIGHT_RATIO } from './includes/helpers';
import { VscElement } from './includes/VscElement';
let VscodeLabel = class VscodeLabel extends VscElement {
    constructor() {
        super(...arguments);
        this.for = '';
    }
    static get styles() {
        return [
            super.styles,
            css `
        :host {
          cursor: default;
          display: block;
        }

        .wrapper {
          color: var(--vscode--settings-headerForeground);
          font-size: var(--vscode-font-size);
          font-weight: 600;
          line-height: ${INPUT_LINE_HEIGHT_RATIO};
          padding: 5px 0;
        }

        :host-context(vscode-form-group[variant='settings-group']) .wrapper {
          line-height: 18px;
          padding: 0;
        }

        ::slotted(.normal) {
          font-weight: normal;
        }

        ::slotted(.lightened) {
          color: var(--vscode-foreground);
          opacity: 0.9;
        }
      `,
        ];
    }
    _handleClick() {
        let target;
        if (this.for) {
            const root = this.getRootNode({ composed: false });
            if (root) {
                target = root.querySelector(`#${this.for}`);
                if (target && 'focus' in target) {
                    target.focus();
                }
            }
        }
    }
    render() {
        return html `
      <div class="wrapper" @click=${this._handleClick}><slot></slot></div>
    `;
    }
};
__decorate([
    property()
], VscodeLabel.prototype, "for", void 0);
VscodeLabel = __decorate([
    customElement('vscode-label')
], VscodeLabel);
export { VscodeLabel };
//# sourceMappingURL=vscode-label.js.map