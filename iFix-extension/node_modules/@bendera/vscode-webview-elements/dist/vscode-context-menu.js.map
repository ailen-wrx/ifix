{"version":3,"file":"vscode-context-menu.js","sourceRoot":"","sources":["../src/vscode-context-menu.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,GAAG,EAAkB,IAAI,EAAE,OAAO,EAAiB,MAAM,KAAK,CAAC;AACvE,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAC1D,OAAO,EAAC,UAAU,EAAC,MAAM,uBAAuB,CAAC;AACjD,OAAO,4BAA4B,CAAC;AAWpC,IAAa,iBAAiB,GAA9B,MAAa,iBAAkB,SAAQ,UAAU;IAAjD;;QACE;;;;;;;WAOG;QACsB,SAAI,GAAmB,EAAE,CAAC;QACnD,2BAA2B;QACe,SAAI,GAAG,KAAK,CAAC;IAqHzD,CAAC;IAnHS,WAAW,CAAC,KAAkB;QACpC,MAAM,EAAC,MAAM,EAAC,GAAG,KAAK,CAAC;QAEvB,IAAI,CAAC,aAAa,CAChB,IAAI,WAAW,CAAC,YAAY,EAAE;YAC5B,MAAM;YACN,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,IAAI;SACf,CAAC,CACH,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,MAAM;QACf,OAAO;YACL,KAAK,CAAC,MAAM;YACZ,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAoEF;SACF,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,MAAM,IAAI,GAAG,IAAI,CAAA;;UAEX,IAAI,CAAC,IAAI;YACT,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CACX,CAAC,EACC,KAAK,GAAG,EAAE,EACV,UAAU,GAAG,EAAE,EACf,KAAK,GAAG,EAAE,EACV,SAAS,GAAG,KAAK,EACjB,QAAQ,GAAG,CAAC,GACb,EAAE,EAAE,CAAC,IAAI,CAAA;;2BAEG,KAAK;gCACA,UAAU;2BACf,KAAK;gCACA,SAAS;8BACX,QAAQ;gCACN,IAAI,CAAC,WAAW;;eAEjC,CACF;YACH,CAAC,CAAC,IAAI,CAAA,eAAe;;KAE1B,CAAC;QAEF,OAAO,IAAI,CAAA,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,GAAG,CAAC;IAC/C,CAAC;CACF,CAAA;AAvH0B;IAAxB,QAAQ,CAAC,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC;+CAA2B;AAET;IAAzC,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;+CAAc;AAX5C,iBAAiB;IAD7B,aAAa,CAAC,qBAAqB,CAAC;GACxB,iBAAiB,CAgI7B;SAhIY,iBAAiB","sourcesContent":["import {css, CSSResultGroup, html, nothing, TemplateResult} from 'lit';\r\nimport {customElement, property} from 'lit/decorators.js';\r\nimport {VscElement} from './includes/VscElement';\r\nimport './vscode-context-menu-item';\r\n\r\ninterface MenuItemData {\r\n  label: string;\r\n  keybinding?: string;\r\n  value?: string;\r\n  separator?: boolean;\r\n  tabindex?: number;\r\n}\r\n\r\n@customElement('vscode-context-menu')\r\nexport class VscodeContextMenu extends VscElement {\r\n  /** <pre><code>interface MenuItemData {\r\n   * &nbsp;&nbsp;label: string;\r\n   * &nbsp;&nbsp;keybinding?: string;\r\n   * &nbsp;&nbsp;value?: string;\r\n   * &nbsp;&nbsp;separator?: boolean;\r\n   * &nbsp;&nbsp;tabindex?: number;\r\n   * }</code></pre>\r\n   */\r\n  @property({type: Array}) data: MenuItemData[] = [];\r\n  // TODO: hide on item click\r\n  @property({type: Boolean, reflect: true}) show = false;\r\n\r\n  private onItemClick(event: CustomEvent) {\r\n    const {detail} = event;\r\n\r\n    this.dispatchEvent(\r\n      new CustomEvent('vsc-select', {\r\n        detail,\r\n        bubbles: true,\r\n        composed: true,\r\n      })\r\n    );\r\n  }\r\n\r\n  static get styles(): CSSResultGroup {\r\n    return [\r\n      super.styles,\r\n      css`\r\n        :host {\r\n          display: block;\r\n          font-family: var(--vscode-font-family);\r\n          font-size: var(--vscode-font-size);\r\n          font-weight: var(--vscode-font-weight);\r\n          line-height: 1.4em;\r\n          position: relative;\r\n        }\r\n\r\n        .context-menu {\r\n          background-color: var(--vscode-menu-background);\r\n          box-shadow: 0 2px 8px var(--vscode-widget-shadow);\r\n          color: var(--vscode-menu-foreground);\r\n          padding: 0.5em 0;\r\n          white-space: nowrap;\r\n        }\r\n\r\n        .context-menu-item {\r\n          border: 1px solid transparent;\r\n          display: flex;\r\n          user-select: none;\r\n        }\r\n\r\n        .rule {\r\n          border-bottom: 1px solid var(--vscode-menu-separatorBackground);\r\n          display: block;\r\n          margin: 0 0.8em 0.2em;\r\n          opacity: 0.4;\r\n          padding-top: 0.2em;\r\n          width: 100%;\r\n        }\r\n\r\n        .context-menu-item a {\r\n          align-items: center;\r\n          color: var(--vscode-menu-foreground);\r\n          cursor: default;\r\n          display: flex;\r\n          flex: 1 1 auto;\r\n          height: 2em;\r\n          outline: none;\r\n          position: relative;\r\n          text-decoration: inherit;\r\n        }\r\n\r\n        .context-menu-item a:hover,\r\n        .context-menu-item a:focus {\r\n          background-color: var(--vscode-menu-selectionBackground);\r\n          color: var(--vscode-menu-selectionForeground);\r\n        }\r\n\r\n        .label {\r\n          background: none;\r\n          display: flex;\r\n          flex: 1 1 auto;\r\n          font-size: 12px;\r\n          line-height: 1;\r\n          padding: 0 2em;\r\n          text-decoration: none;\r\n        }\r\n\r\n        .keybinding {\r\n          display: block;\r\n          flex: 2 1 auto;\r\n          line-height: 1;\r\n          padding: 0 2em;\r\n          text-align: right;\r\n        }\r\n      `,\r\n    ];\r\n  }\r\n\r\n  render(): TemplateResult {\r\n    const menu = html`\r\n      <div class=\"context-menu\">\r\n        ${this.data\r\n          ? this.data.map(\r\n              ({\r\n                label = '',\r\n                keybinding = '',\r\n                value = '',\r\n                separator = false,\r\n                tabindex = 0,\r\n              }) => html`\r\n                <vscode-context-menu-item\r\n                  label=\"${label}\"\r\n                  keybinding=\"${keybinding}\"\r\n                  value=\"${value}\"\r\n                  ?separator=\"${separator}\"\r\n                  tabindex=\"${tabindex}\"\r\n                  @vsc-click=\"${this.onItemClick}\"\r\n                ></vscode-context-menu-item>\r\n              `\r\n            )\r\n          : html`<slot></slot>`}\r\n      </div>\r\n    `;\r\n\r\n    return html` ${this.show ? menu : nothing} `;\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'vscode-context-menu': VscodeContextMenu;\r\n  }\r\n}\r\n"]}