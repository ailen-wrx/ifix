var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css, html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { styleMap } from 'lit/directives/style-map.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { VscElement } from './includes/VscElement';
let VscodeIcon = class VscodeIcon extends VscElement {
    constructor() {
        super(...arguments);
        /**
         * Codicon icon name. @see https://microsoft.github.io/vscode-codicons/dist/codicon.html
         */
        this.name = '';
        /**
         * Icon size in pixels
         */
        this.size = 16;
        /**
         * Enable rotation animation
         */
        this.spin = false;
        /**
         * Animation duration in seconds
         */
        this.spinDuration = 1.5;
        this._actionIcon = false;
    }
    set actionIcon(val) {
        this._actionIcon = val;
        if (val) {
            if (!this.hasAttribute('role')) {
                this.setAttribute('role', 'button');
            }
        }
        else {
            if (this.hasAttribute('role') && this.getAttribute('role') === 'button') {
                this.removeAttribute('role');
            }
        }
    }
    get actionIcon() {
        return this._actionIcon;
    }
    _getStylesheetConfig() {
        const linkElement = document.getElementById('vscode-codicon-stylesheet');
        const href = (linkElement === null || linkElement === void 0 ? void 0 : linkElement.getAttribute('href')) || undefined;
        const nonce = (linkElement === null || linkElement === void 0 ? void 0 : linkElement.getAttribute('nonce')) || undefined;
        return { nonce, href };
    }
    static get styles() {
        return [
            super.styles,
            css `
        :host {
          color: var(--vscode-icon-foreground);
          display: inline-block;
        }

        .codicon[class*='codicon-'] {
          display: block;
        }

        .wrapper {
          display: block;
        }

        :host([action-icon]) .wrapper {
          border-radius: 5px;
          cursor: pointer;
          padding: 3px;
        }

        :host([action-icon]) .wrapper:hover {
          background-color: var(--vscode-toolbar-hoverBackground);
        }

        :host([action-icon]) .wrapper:active {
          background-color: var(--vscode-toolbar-activeBackground);
        }

        :host([action-icon]:focus) {
          outline: none;
        }

        :host([action-icon]:focus-visible) {
          outline: 1px solid var(--vscode-focusBorder);
          outline-offset: -1px;
        }

        @keyframes icon-spin {
          100% {
            transform: rotate(360deg);
          }
        }

        .spin {
          animation-name: icon-spin;
          animation-timing-function: linear;
          animation-iteration-count: infinite;
        }
      `,
        ];
    }
    render() {
        const { href, nonce } = this._getStylesheetConfig();
        return html `
      <link
        rel="stylesheet"
        href="${ifDefined(href)}"
        nonce="${ifDefined(nonce)}"
      />
      <span class="wrapper">
        <span
          class="${classMap({
            codicon: true,
            ['codicon-' + this.name]: true,
            spin: this.spin,
        })}"
          style="${styleMap({
            animationDuration: String(this.spinDuration) + 's',
            fontSize: this.size + 'px',
            height: this.size + 'px',
            width: this.size + 'px',
        })}"
        ></span>
      </span>
    `;
    }
};
__decorate([
    property({ type: String })
], VscodeIcon.prototype, "name", void 0);
__decorate([
    property({ type: Number })
], VscodeIcon.prototype, "size", void 0);
__decorate([
    property({ type: Boolean })
], VscodeIcon.prototype, "spin", void 0);
__decorate([
    property({ type: Number, attribute: 'spin-duration' })
], VscodeIcon.prototype, "spinDuration", void 0);
__decorate([
    property({ type: Boolean, attribute: 'action-icon' })
], VscodeIcon.prototype, "actionIcon", null);
VscodeIcon = __decorate([
    customElement('vscode-icon')
], VscodeIcon);
export { VscodeIcon };
//# sourceMappingURL=vscode-icon.js.map