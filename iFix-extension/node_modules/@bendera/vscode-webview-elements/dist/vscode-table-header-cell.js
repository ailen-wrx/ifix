var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css, html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { VscElement } from './includes/VscElement';
let VscodeTableHeaderCell = class VscodeTableHeaderCell extends VscElement {
    constructor() {
        super(...arguments);
        this.role = 'columnheader';
    }
    static get styles() {
        return [
            super.styles,
            css `
        :host {
          box-sizing: border-box;
          display: table-cell;
          font-family: var(--vscode-font-style);
          font-size: var(--vscode-font-size);
          font-weight: bold;
          line-height: 20px;
          overflow: hidden;
          padding-bottom: 5px;
          padding-left: 10px;
          padding-right: 0;
          padding-top: 5px;
          text-overflow: ellipsis;
          white-space: nowrap;
        }

        .wrapper {
          box-sizing: inherit;
          overflow: inherit;
          text-overflow: inherit;
          white-space: inherit;
          width: 100%;
        }
      `,
        ];
    }
    render() {
        return html `
      <div class="wrapper">
        <slot></slot>
      </div>
    `;
    }
};
__decorate([
    property({ reflect: true })
], VscodeTableHeaderCell.prototype, "role", void 0);
VscodeTableHeaderCell = __decorate([
    customElement('vscode-table-header-cell')
], VscodeTableHeaderCell);
export { VscodeTableHeaderCell };
//# sourceMappingURL=vscode-table-header-cell.js.map