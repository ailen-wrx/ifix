var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css, html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { VscElement } from './includes/VscElement';
let VscodeFormGroup = class VscodeFormGroup extends VscElement {
    constructor() {
        super(...arguments);
        this.variant = 'horizontal';
    }
    static get styles() {
        return [
            super.styles,
            css `
        :host {
          --label-right-margin: 14px;
          --label-default-width: 150px;

          display: block;
          margin: 15px 0;
        }

        :host([variant='settings-group']) {
          margin: 0;
          padding: 12px 14px 18px;
          max-width: 727px;
        }

        .wrapper {
          display: flex;
          flex-wrap: wrap;
        }

        :host([variant='vertical']) .wrapper,
        :host([variant='settings-group']) .wrapper {
          display: block;
        }

        :host([variant='horizontal']) ::slotted(vscode-checkbox-group),
        :host([variant='horizontal']) ::slotted(vscode-radio-group) {
          width: calc(
            100% -
              calc(
                var(--vsc-inline-label-width, var(--label-default-width)) +
                  var(--label-right-margin)
              )
          );
        }

        :host([variant='horizontal']) ::slotted(vscode-label) {
          margin-right: var(--label-right-margin);
          text-align: right;
          width: var(--vsc-inline-label-width, var(--label-default-width));
        }

        :host([variant='settings-group']) ::slotted(vscode-label) {
          height: 18px;
          line-height: 18px;
          margin-bottom: 4px;
          margin-right: 0;
        }

        ::slotted(vscode-form-helper) {
          margin-left: calc(
            var(--vsc-inline-label-width, var(--label-default-width)) +
              var(--label-right-margin)
          );
        }

        :host([variant='vertical']) ::slotted(vscode-form-helper),
        :host([variant='settings-group']) ::slotted(vscode-form-helper) {
          display: block;
          margin-left: 0;
        }

        :host([variant='settings-group']) ::slotted(vscode-form-helper) {
          margin-bottom: 0;
          margin-top: 0;
        }

        :host([variant='vertical']) ::slotted(vscode-label),
        :host([variant='settings-group']) ::slotted(vscode-label) {
          display: block;
          margin-left: 0;
          text-align: left;
        }

        :host([variant='settings-group']) ::slotted(vscode-inputbox),
        :host([variant='settings-group']) ::slotted(vscode-single-select),
        :host([variant='settings-group']) ::slotted(vscode-multi-select) {
          margin-top: 9px;
        }

        ::slotted(vscode-button:first-child) {
          margin-left: calc(
            var(--vsc-inline-label-width, var(--label-default-width)) +
              var(--label-right-margin)
          );
        }

        :host([variant='vertical']) ::slotted(vscode-button) {
          margin-left: 0;
        }

        ::slotted(vscode-button) {
          margin-right: 4px;
        }
      `,
        ];
    }
    render() {
        return html `
      <div class="wrapper">
        <slot></slot>
      </div>
    `;
    }
};
__decorate([
    property({ reflect: true })
], VscodeFormGroup.prototype, "variant", void 0);
VscodeFormGroup = __decorate([
    customElement('vscode-form-group')
], VscodeFormGroup);
export { VscodeFormGroup };
//# sourceMappingURL=vscode-form-group.js.map