var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html } from 'lit';
import { customElement, property, state } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { FormButtonWidgetBase } from './includes/form-button-widget/FormButtonWidgetBase';
import baseStyles from './includes/form-button-widget/base.styles';
import radioStyles from './includes/form-button-widget/radio.styles';
import formHelperTextStyles from './includes/formHelperTextStyles';
/**
 * @attr name - Name which is used as a variable name in the data of the form-container.
 */
let VscodeRadio = class VscodeRadio extends FormButtonWidgetBase {
    constructor() {
        super(...arguments);
        this.label = '';
        this.name = '';
        this.value = '';
        this.disabled = false;
        this._checked = false;
        this.isSlotEmpty = true;
    }
    set checked(val) {
        this._checked = val;
    }
    get checked() {
        return this._checked;
    }
    _checkButton() {
        const root = this.getRootNode({ composed: true });
        if (!root) {
            return;
        }
        const radios = root.querySelectorAll(`vscode-radio[name="${this.name}"]`);
        this._checked = true;
        radios.forEach((r) => {
            if (r !== this) {
                r.checked = false;
            }
        });
    }
    _handleClick() {
        if (this.disabled) {
            return;
        }
        this._checkButton();
        this.dispatchEvent(new CustomEvent('vsc-change', {
            detail: {
                checked: this.checked,
                label: this.label,
                value: this.value,
            },
            bubbles: true,
            composed: true,
        }));
    }
    _handleKeyDown(event) {
        if (!this.disabled && (event.key === 'Enter' || event.key === ' ')) {
            this.checked = true;
        }
    }
    _handleSlotChange() {
        this.isSlotEmpty = this.innerHTML === '';
    }
    static get styles() {
        return [super.styles, baseStyles, radioStyles, formHelperTextStyles];
    }
    render() {
        const isLabelEmpty = !this.label && this.isSlotEmpty;
        const iconClasses = classMap({
            icon: true,
            checked: this.checked,
            'before-empty-label': isLabelEmpty,
        });
        const labelInnerClasses = classMap({
            'label-inner': true,
            empty: isLabelEmpty,
        });
        return html `
      <div class="wrapper">
        <input
          id="${this._uid}"
          class="radio"
          type="checkbox"
          ?checked="${this.checked}"
          value="${this.value}"
          tabindex="-1"
        />
        <div class="${iconClasses}"></div>
        <label for="${this._uid}" class="label" @click="${this._handleClick}">
          <span class="${labelInnerClasses}">
            <slot @slotchange="${this._handleSlotChange}">${this.label}</slot>
          </span>
        </label>
      </div>
    `;
    }
};
__decorate([
    property({ type: Boolean })
], VscodeRadio.prototype, "checked", null);
__decorate([
    property()
], VscodeRadio.prototype, "label", void 0);
__decorate([
    property()
], VscodeRadio.prototype, "name", void 0);
__decorate([
    property()
], VscodeRadio.prototype, "value", void 0);
__decorate([
    property({ type: Boolean })
], VscodeRadio.prototype, "disabled", void 0);
__decorate([
    state()
], VscodeRadio.prototype, "_checked", void 0);
__decorate([
    state()
], VscodeRadio.prototype, "isSlotEmpty", void 0);
VscodeRadio = __decorate([
    customElement('vscode-radio')
], VscodeRadio);
export { VscodeRadio };
//# sourceMappingURL=vscode-radio.js.map