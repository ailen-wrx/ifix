var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { repeat } from 'lit/directives/repeat.js';
import { chevronDownIcon } from './includes/vscode-select/template-elements';
import { VscodeSelectBase } from './includes/vscode-select/vscode-select-base';
/**
 * @attr name - Name which is used as a variable name in the data of the form-container.
 */
let VscodeMultiSelect = class VscodeMultiSelect extends VscodeSelectBase {
    constructor() {
        super(...arguments);
        this._multiple = true;
    }
    set selectedIndexes(val) {
        this._selectedIndexes = val;
    }
    get selectedIndexes() {
        return this._selectedIndexes;
    }
    set value(val) {
        this._values = val;
        const valMap = {};
        this._options.forEach(({ value }, index) => {
            valMap[value] = index;
        });
        this._selectedIndexes = [];
        val.forEach((v) => {
            if (valMap[v]) {
                this._selectedIndexes.push(valMap[v]);
            }
        });
    }
    get value() {
        return this._values;
    }
    _onOptionClick(ev) {
        const composedPath = ev.composedPath();
        const optEl = composedPath.find((et) => {
            if ('matches' in et) {
                return et.matches('li.option');
            }
            return false;
        });
        if (!optEl) {
            return;
        }
        const index = Number(optEl.dataset.index);
        if (this._options[index]) {
            this._options[index].selected = !this._options[index].selected;
        }
        this._selectedIndexes = [];
        this._values = [];
        this._options.forEach((op) => {
            if (op.selected) {
                this._selectedIndexes.push(op.index);
                this._values.push(op.value);
            }
        });
        this._dispatchChangeEvent();
    }
    _onMultiAcceptClick() {
        this._toggleDropdown(false);
    }
    _onMultiDeselectAllClick() {
        this._selectedIndexes = [];
        this._values = [];
        this._options = this._options.map((op) => ({ ...op, selected: false }));
        this._dispatchChangeEvent();
    }
    _onMultiSelectAllClick() {
        this._selectedIndexes = [];
        this._values = [];
        this._options = this._options.map((op) => ({ ...op, selected: true }));
        this._options.forEach((op, index) => {
            this._selectedIndexes.push(index);
            this._values.push(op.value);
            this._dispatchChangeEvent();
        });
    }
    _renderLabel() {
        switch (this._selectedIndexes.length) {
            case 0:
                return html `<span class="select-face-badge no-item"
          >No items selected</span
        >`;
            case 1:
                return html `<span class="select-face-badge">1 item selected</span>`;
            default:
                return html `<span class="select-face-badge"
          >${this._selectedIndexes.length} items selected</span
        >`;
        }
    }
    _renderSelectFace() {
        return html `
      <div class="select-face multiselect" @click="${this._onFaceClick}">
        ${this._renderLabel()} ${chevronDownIcon}
      </div>
    `;
    }
    _renderComboboxFace() {
        const inputVal = this._selectedIndex > -1 ? this._options[this._selectedIndex].label : '';
        return html `
      <div class="combobox-face">
        ${this._renderLabel()}
        <input
          class="combobox-input"
          spellcheck="false"
          type="text"
          .value="${inputVal}"
          @focus="${this._onComboboxInputFocus}"
          @input="${this._onComboboxInputInput}"
        />
        <button
          class="combobox-button"
          type="button"
          @click="${this._onComboboxButtonClick}"
          @keydown="${this._onComboboxButtonKeyDown}"
        >
          ${chevronDownIcon}
        </button>
      </div>
    `;
    }
    _renderOptions() {
        const list = this.combobox ? this._filteredOptions : this._options;
        return html `
      <ul
        class="options"
        @click="${this._onOptionClick}"
        @mouseover="${this._onOptionMouseOver}"
      >
        ${repeat(list, (op) => op.index, (op, index) => {
            const selected = this._selectedIndexes.includes(op.index);
            const optionClasses = classMap({
                active: index === this._activeIndex,
                option: true,
                selected,
            });
            const checkboxClasses = classMap({
                'checkbox-icon': true,
                checked: selected,
            });
            return html `
              <li
                class="${optionClasses}"
                data-index="${op.index}"
                data-filtered-index="${index}"
              >
                <span class="${checkboxClasses}"></span>
                <span class="option-label">${op.label}</span>
              </li>
            `;
        })}
      </ul>
    `;
    }
    _renderDropdownControls() {
        return html `
      <div class="dropdown-controls">
        <button
          type="button"
          @click="${this._onMultiSelectAllClick}"
          title="Select all"
          class="action-icon"
        >
          <vscode-icon name="checklist"></vscode-icon>
        </button>
        <button
          type="button"
          @click="${this._onMultiDeselectAllClick}"
          title="Deselect all"
          class="action-icon"
        >
          <vscode-icon name="clear-all"></vscode-icon>
        </button>
        <vscode-button @click="${this._onMultiAcceptClick}">OK</vscode-button>
      </div>
    `;
    }
};
__decorate([
    property({ type: Array })
], VscodeMultiSelect.prototype, "selectedIndexes", null);
__decorate([
    property({ type: Array })
], VscodeMultiSelect.prototype, "value", null);
VscodeMultiSelect = __decorate([
    customElement('vscode-multi-select')
], VscodeMultiSelect);
export { VscodeMultiSelect };
//# sourceMappingURL=vscode-multi-select.js.map