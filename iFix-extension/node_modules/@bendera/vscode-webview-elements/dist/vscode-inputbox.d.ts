import { CSSResultGroup, TemplateResult } from 'lit';
import { VscElement } from './includes/VscElement';
declare type InputType = 'color' | 'date' | 'datetime-local' | 'email' | 'file' | 'month' | 'number' | 'password' | 'tel' | 'text' | 'time' | 'url' | 'week';
/**
 * @attr {narrow|wide} variant - The sizes are borrowed from the VSCode settings page. The narrow size is typically used for the numeric values and the wide size for the text.
 * @attr name - Name which is used as a variable name in the data of the form-container.
 *
 * @cssprop --vscode-scrollbarSlider-background
 * @cssprop --vscode-scrollbarSlider-hoverBackground
 * @cssprop --vscode-scrollbarSlider-activeBackground
 * @cssprop --vscode-input-background
 * @cssprop --vscode-settings-textInputBorder
 * @cssprop --vscode-input-foreground
 * @cssprop --vscode-input-placeholderForeground
 * @cssprop --vscode-focusBorder
 * @cssprop --vscode-panelInput-border
 * @cssprop --vscode-focusBorder
 * @cssprop --vscode-inputValidation-infoBackground
 * @cssprop --vscode-inputValidation-infoBorder
 * @cssprop --vscode-inputValidation-warningBackground
 * @cssprop --vscode-inputValidation-warningBorder
 * @cssprop --vscode-inputValidation-errorBackground
 * @cssprop --vscode-inputValidation-errorBorder
 * @cssprop --vscode-editor-background
 */
export declare class VscodeInputbox extends VscElement {
    label: string;
    multiline: boolean;
    message: string;
    set severity(val: string);
    get severity(): string;
    /**
     * @deprecated
     * @attr panelInput
     */
    panelInput: boolean;
    /**
     * Text-like input types
     * @attr type
     * @type {"color"|"date"|"datetime-local"|"email"|"file"|"month"|"number"|"password"|"tel"|"text"|"time"|"url"|"week"}
     */
    type: InputType;
    focused: boolean;
    value: string;
    placeholder: string;
    lines: number;
    maxLines: number;
    min: number | undefined;
    minLength: number | undefined;
    max: number | undefined;
    maxLength: number | undefined;
    multiple: boolean;
    readonly: boolean;
    step: number | undefined;
    private _measurerEl;
    private _inputElement;
    private _textareaHeight;
    private _severity;
    private _textareaDefaultCursor;
    constructor();
    connectedCallback(): void;
    updated(changedProperties: Map<string, undefined | string | boolean | number>): void;
    get focusElement(): HTMLInputElement | HTMLTextAreaElement;
    focus(): void;
    toString(): string;
    private onInputFocus;
    private onInputBlur;
    private onInputInput;
    private onInputChange;
    private onTextareaMouseMove;
    private resizeTextareaIfRequired;
    static get styles(): CSSResultGroup;
    render(): TemplateResult;
}
declare global {
    interface HTMLElementTagNameMap {
        'vscode-inputbox': VscodeInputbox;
    }
}
export {};
//# sourceMappingURL=vscode-inputbox.d.ts.map