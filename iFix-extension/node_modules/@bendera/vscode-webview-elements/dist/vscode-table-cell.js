var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, css, nothing } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { VscElement } from './includes/VscElement';
let VscodeTableCell = class VscodeTableCell extends VscElement {
    constructor() {
        super(...arguments);
        this.role = 'cell';
        /**
         * Cell label in the compact view of the responsive mode. For internal use only.
         */
        this.columnLabel = '';
        /**
         * Enable compact view in the responsive mode. For internal use only.
         */
        this.compact = false;
    }
    static get styles() {
        return [
            super.styles,
            css `
        :host {
          box-sizing: border-box;
          display: table-cell;
          height: 24px;
          overflow: hidden;
          padding-left: 10px;
          text-overflow: ellipsis;
          vertical-align: middle;
          white-space: nowrap;
        }

        :host([compact]) {
          display: block;
          height: auto;
          padding-bottom: 5px;
          width: 100% !important;
        }

        :host([compact]:first-child) {
          padding-top: 10px;
        }

        :host-context(vscode-table[bordered][compact]) {
          border: 0;
        }

        :host([compact]:last-child) {
          padding-bottom: 10px;
        }

        :host-context(vscode-table[bordered]) {
          border-bottom: 1px solid var(--vscode-editorGroup-border);
        }

        .wrapper {
          overflow: inherit;
          text-overflow: inherit;
          white-space: inherit;
          width: 100%;
        }

        .column-label {
          font-weight: bold;
        }
      `,
        ];
    }
    render() {
        const columnLabelElement = this.columnLabel
            ? html `<div class="column-label" role="presentation">
          ${this.columnLabel}
        </div>`
            : nothing;
        return html `
      <div class="wrapper">
        ${columnLabelElement}
        <slot></slot>
      </div>
    `;
    }
};
__decorate([
    property({ reflect: true })
], VscodeTableCell.prototype, "role", void 0);
__decorate([
    property()
], VscodeTableCell.prototype, "columnLabel", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], VscodeTableCell.prototype, "compact", void 0);
VscodeTableCell = __decorate([
    customElement('vscode-table-cell')
], VscodeTableCell);
export { VscodeTableCell };
//# sourceMappingURL=vscode-table-cell.js.map