import { CSSResultGroup, TemplateResult } from 'lit';
import { VscElement } from './includes/VscElement';
import './vscode-icon';
interface TreeItemIconConfig {
    branch?: string;
    open?: string;
    leaf?: string;
}
interface TreeItem {
    label: string;
    subItems?: TreeItem[];
    open?: boolean;
    selected?: boolean;
    focused?: boolean;
    icons?: TreeItemIconConfig;
    value?: string;
    path?: number[];
}
/**
 * ## Type definitions
 *
 * ```typescript
 * type ItemType = 'branch' | 'leaf';
 *
 * interface TreeItemIconConfig {
 *   branch?: string;
 *   open?: string;
 *   leaf?: string;
 * }
 *
 * interface TreeItem {
 *   label: string;
 *   subItems?: TreeItem[];
 *   open?: boolean;
 *   selected?: boolean;
 *   focused?: boolean;
 *   icons?: TreeItemIconConfig;
 *
 *   // If it's not defined the value will be equal to the label
 *   value?: string;
 *
 *   // Item path in the tree. For example [0,0,1] means:
 *   // tree[0].subItems[0].subItems[1]
 *   path?: number[];
 * }
 *
 * interface SelectEventDetail {
 *   icons: TreeItemIconConfig | undefined;
 *   itemType: ItemType;
 *   label: string;
 *   open: boolean;
 *   value: string;
 *   path: string; // ex.: 0/0/1
 * }
 * ```
 */
export declare class VscodeTree extends VscElement {
    set data(val: TreeItem[]);
    get data(): TreeItem[];
    indent: number;
    arrows: boolean;
    multiline: boolean;
    tabindex: number;
    private _data;
    private _selectedItem;
    private _focusedItem;
    private getItemByPath;
    private getItemType;
    private getIconName;
    private renderTreeItem;
    private renderTree;
    private toggleSubTreeOpen;
    private selectTreeItem;
    private focusTreeItem;
    private closeSubTreeRecursively;
    private emitSelectEvent;
    private _focusItem;
    private _focusPrevItem;
    private _focusNextItem;
    private onComponentClick;
    private onComponentKeyDown;
    private onComponentKeyDownBound;
    closeAll(): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    static get styles(): CSSResultGroup;
    render(): TemplateResult;
}
declare global {
    interface HTMLElementTagNameMap {
        'vscode-tree': VscodeTree;
    }
}
export {};
//# sourceMappingURL=vscode-tree.d.ts.map