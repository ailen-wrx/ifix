{"version":3,"file":"vscode-checkbox.js","sourceRoot":"","sources":["../src/vscode-checkbox.ts"],"names":[],"mappings":"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","sourcesContent":["import {CSSResultGroup, html, nothing, TemplateResult} from 'lit';\r\nimport {customElement, property, state} from 'lit/decorators.js';\r\nimport {classMap} from 'lit/directives/class-map.js';\r\nimport {FormButtonWidgetBase} from './includes/form-button-widget/FormButtonWidgetBase';\r\nimport baseStyles from './includes/form-button-widget/base.styles';\r\nimport checkboxStyles from './includes/form-button-widget/checkbox.styles';\r\nimport formHelperTextStyles from './includes/formHelperTextStyles';\r\n\r\n/**\r\n * @attr name - Name which is used as a variable name in the data of the form-container.\r\n */\r\n@customElement('vscode-checkbox')\r\nexport class VscodeCheckbox extends FormButtonWidgetBase {\r\n  @property({type: Boolean})\r\n  checked = false;\r\n\r\n  @property()\r\n  label = '';\r\n\r\n  @property()\r\n  value = '';\r\n\r\n  @property({type: Boolean})\r\n  disabled = false;\r\n\r\n  @state()\r\n  private isSlotEmpty = true;\r\n\r\n  protected _handleClick(): void {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    this.checked = !this.checked;\r\n\r\n    this.dispatchEvent(\r\n      new CustomEvent('vsc-change', {\r\n        detail: {\r\n          checked: this.checked,\r\n          label: this.label,\r\n          value: this.value,\r\n        },\r\n        bubbles: true,\r\n        composed: true,\r\n      })\r\n    );\r\n  }\r\n\r\n  protected _handleKeyDown(event: KeyboardEvent): void {\r\n    if (!this.disabled && (event.key === 'Enter' || event.key === ' ')) {\r\n      this.checked = !this.checked;\r\n    }\r\n  }\r\n\r\n  private _handleSlotChange() {\r\n    this.isSlotEmpty = this.innerHTML === '';\r\n  }\r\n\r\n  static get styles(): CSSResultGroup[] {\r\n    return [super.styles, baseStyles, checkboxStyles, formHelperTextStyles];\r\n  }\r\n\r\n  render(): TemplateResult {\r\n    const isLabelEmpty = !this.label && this.isSlotEmpty;\r\n    const iconClasses = classMap({\r\n      icon: true,\r\n      checked: this.checked,\r\n      'before-empty-label': isLabelEmpty,\r\n    });\r\n    const labelInnerClasses = classMap({\r\n      'label-inner': true,\r\n      empty: isLabelEmpty,\r\n    });\r\n\r\n    const icon = html`<svg\r\n      width=\"16\"\r\n      height=\"16\"\r\n      viewBox=\"0 0 16 16\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      fill=\"currentColor\"\r\n    >\r\n      <path\r\n        fill-rule=\"evenodd\"\r\n        clip-rule=\"evenodd\"\r\n        d=\"M14.431 3.323l-8.47 10-.79-.036-3.35-4.77.818-.574 2.978 4.24 8.051-9.506.764.646z\"\r\n      />\r\n    </svg>`;\r\n    const check = this.checked ? icon : nothing;\r\n\r\n    return html`\r\n      <div class=\"wrapper\">\r\n        <input\r\n          id=\"${this._uid}\"\r\n          class=\"checkbox\"\r\n          type=\"checkbox\"\r\n          ?checked=\"${this.checked}\"\r\n          value=\"${this.value}\"\r\n          tabindex=\"-1\"\r\n        />\r\n        <div class=\"${iconClasses}\">${check}</div>\r\n        <label for=\"${this._uid}\" class=\"label\" @click=\"${this._handleClick}\">\r\n          <span class=\"${labelInnerClasses}\">\r\n            <slot @slotchange=\"${this._handleSlotChange}\">${this.label}</slot>\r\n          </span>\r\n        </label>\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'vscode-checkbox': VscodeCheckbox;\r\n  }\r\n}\r\n"]}