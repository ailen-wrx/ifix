var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css, html } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { VscElement } from './includes/VscElement';
let VscodeTabs = class VscodeTabs extends VscElement {
    constructor() {
        super();
        this._headerSlot = null;
        this._mainSlot = null;
        this._selectedIndex = 0;
    }
    set selectedIndex(index) {
        this._selectedIndex = index;
        this._setActiveTab();
    }
    get selectedIndex() {
        return this._selectedIndex;
    }
    _setActiveTab() {
        if (!this._mainSlot || !this._headerSlot) {
            return;
        }
        Array.from(this._mainSlot.assignedElements()).forEach((el, i) => {
            el.style.display =
                i === this._selectedIndex ? 'block' : 'none';
        });
        Array.from(this._headerSlot.assignedElements()).forEach((el, i) => {
            el.dataset.index = String(i);
            el.classList.toggle('is-active', i === this._selectedIndex);
        });
        this.dispatchEvent(new CustomEvent('vsc-select', {
            detail: {
                selectedIndex: this._selectedIndex,
            },
            composed: true,
        }));
    }
    _onSlotChanged() {
        this._setActiveTab();
    }
    _onHeaderClick(event) {
        const index = event.target.dataset.index;
        if (!index) {
            return;
        }
        this._selectedIndex = Number(index);
        this._setActiveTab();
    }
    firstUpdated() {
        this._headerSlot = this.shadowRoot.querySelector('slot[name=header]');
        this._mainSlot = this.shadowRoot.querySelector('slot:not([name=header])');
        this._mainSlot.addEventListener('slotchange', this._onSlotChanged.bind(this));
    }
    static get styles() {
        return [
            super.styles,
            css `
        :host {
          display: block;
        }

        .header {
          display: flex;
          font-family: var(--vscode-font-family);
          font-size: var(--vscode-font-size);
          font-weight: var(--vscode-font-weight);
          width: 100%;
        }

        :host-context(.vscode-light) .header {
          border-bottom: 1px solid #ccc;
        }

        ::slotted(header) {
          border-bottom: 1px solid transparent;
          color: var(--vscode-foreground);
          cursor: pointer;
          display: block;
          margin-bottom: -1px;
          overflow: hidden;
          padding: 7px 8px;
          text-overflow: ellipsis;
          user-select: none;
          white-space: nowrap;
        }

        ::slotted(.is-active) {
          border-bottom-color: var(--vscode-settings-headerForeground);
          color: var(--vscode-settings-headerForeground);
        }
      `,
        ];
    }
    render() {
        return html `
      <div class="header" @click="${this._onHeaderClick}">
        <slot name="header"></slot>
      </div>
      <slot></slot>
    `;
    }
};
__decorate([
    property({ type: Number })
], VscodeTabs.prototype, "selectedIndex", null);
VscodeTabs = __decorate([
    customElement('vscode-tabs')
], VscodeTabs);
export { VscodeTabs };
//# sourceMappingURL=vscode-tabs.js.map